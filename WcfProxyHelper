/*********************************************************************************************************************
	Name: 	Generic WebServiceProxyHelper  

	Desc: 	A Web Proxy helper to create a proxy based on the Given wsdl and contract and gets response.

	Auth: 	Yaswanth Kata
	Date: 	01/06/2015

	NOTE:	

**********************************************************************************************************************/
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.ServiceModel;
using System.ServiceModel.Description;

namespace Test.Framework.Helper
{
    public class WebServiceProxyHelper
    {
        //Purpose :Method for poplulating Testdata as input paramater and invoking the web service.Getting the response and Validating it with Validation data.
        //Note :The Service DataCSV should have Columns with data as  MethodName for this method to fucntion properly.
        public object GetResponse(Dictionary<string, object> serviceData, string parameter)
        {
            dynamic result = null;
            try
            {
                CompilerResults compilerResults = null;
                object proxyInstance = GetProxyInstance(ref compilerResults, serviceData);
                // Get the operation's method
                var methodInfo = proxyInstance.GetType().GetMethod(serviceData["MethodName"].ToString());
                object[] operationParameters = new object[] { parameter };
                //Invokes service method and get the result.
                result = methodInfo.Invoke(proxyInstance, BindingFlags.InvokeMethod, null, operationParameters, null);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message+ex.StackTrace);
            }
            return result;
        }

        //Creates proxy instance for the serivce.
        //Note :The Service DataCSV should have Columns with data as  WsdlUri,ContractName for this method to fucntion properly.
        private object GetProxyInstance(ref CompilerResults compilerResults,Dictionary<string,object> serviceData )
        {
            object proxyInstance = null;

            // Define the WSDL Get address, contract name and parameters, with this we can extract WSDL details any time
            Uri address = new Uri(serviceData["WsdlUri"].ToString());
            // For HttpGet endpoints use a Service WSDL address a mexMode of .HttpGet and for MEX endpoints use a MEX address and a mexMode of .MetadataExchange
            MetadataExchangeClientMode mexMode = MetadataExchangeClientMode.HttpGet;

            // Get the metadata file from the service.
            MetadataExchangeClient metadataExchangeClient = new MetadataExchangeClient(address, mexMode);
            metadataExchangeClient.ResolveMetadataReferences = true;

            //One can also provide credentials if service needs that by the help following two lines.
            //ICredentials networkCredential = new NetworkCredential("", "", "");
            //metadataExchangeClient.HttpCredentials = networkCredential;

            //Gets the meta data information of the service.
            MetadataSet metadataSet = metadataExchangeClient.GetMetadata();

            // Import all contracts and endpoints.
            WsdlImporter wsdlImporter = new WsdlImporter(metadataSet);

            //Import all contracts.
            Collection<ContractDescription> contracts = wsdlImporter.ImportAllContracts();

            //Import all end points.
            ServiceEndpointCollection allEndpoints = wsdlImporter.ImportAllEndpoints();

            // Generate type information for each contract.
            ServiceContractGenerator serviceContractGenerator = new ServiceContractGenerator();

            //Dictinary has been defined to keep all the contract endpoints present, contract name is key of the dictionary item.
            var endpointsForContracts = new Dictionary<string, IEnumerable<ServiceEndpoint>>();
            string contractName = serviceData["ContractName"].ToString();

            foreach (ContractDescription contract in contracts)
            {
                serviceContractGenerator.GenerateServiceContractType(contract);
                // Keep a list of each contract's endpoints.
                endpointsForContracts[contract.Name] = allEndpoints.Where(ep => ep.Contract.Name == contract.Name).ToList();
            }

            // Generate a code file for the contracts.
            CodeGeneratorOptions codeGeneratorOptions = new CodeGeneratorOptions();
            codeGeneratorOptions.BracingStyle = "C";

            // Create Compiler instance of a specified language.
            CodeDomProvider codeDomProvider = CodeDomProvider.CreateProvider("C#");

            // Adding WCF-related assemblies references as copiler parameters, so as to do the compilation of particular service contract.
            CompilerParameters compilerParameters = new CompilerParameters(new string[] { "System.dll", "System.ServiceModel.dll", "System.Runtime.Serialization.dll" });
            compilerParameters.GenerateInMemory = true;

            //Gets the compiled assembly.
            compilerResults = codeDomProvider.CompileAssemblyFromDom(compilerParameters, serviceContractGenerator.TargetCompileUnit);

            if (compilerResults.Errors.Count <= 0)
            {
                // Find the proxy type that was generated for the specified contract (identified by a class that implements the contract and ICommunicationbject - this is contract
                //implemented by all the communication oriented objects).
                Type proxyType = compilerResults.CompiledAssembly.GetTypes().First(t => t.IsClass && t.GetInterface(contractName) != null &&
                    t.GetInterface(typeof(ICommunicationObject).Name) != null);

                // Now we get the first service endpoint for the particular contract.
                ServiceEndpoint serviceEndpoint = endpointsForContracts[contractName].First();

                // Create an instance of the proxy by passing the endpoint binding and address as parameters.
                proxyInstance = compilerResults.CompiledAssembly.CreateInstance(proxyType.Name, false, BindingFlags.CreateInstance, null,
                    new object[] { serviceEndpoint.Binding, serviceEndpoint.Address }, CultureInfo.CurrentCulture, null);
            }

            return proxyInstance;
        }

        //Recursive method to load the test data into input parameter .
        private  void RecursiveLoad(object instance, Dictionary<string, object> dataDic, CompilerResults compilerResults)
        {
            foreach (var property in instance.GetType().GetProperties())
            {
                if ((dataDic.Keys.Contains(property.Name) || dataDic.Keys.Contains(instance.GetType().Name + "." + property.Name )))
                {
                    if (property.PropertyType.IsEnum)
                    {
                        property.SetValue(instance, Enum.ToObject(property.PropertyType, Convert.ToInt32(dataDic[property.Name])));
                    }
                //Loading normal properties/fields
                    else if (Nullable.GetUnderlyingType(property.PropertyType)!=null)
                    {
                        if (Nullable.GetUnderlyingType(property.PropertyType).Name == "DateTime")
                        {
                            DateTime tempVal;
                            DateTime value = DateTime.TryParse(dataDic[property.Name].ToString(), out tempVal) ? tempVal : DateTime.UtcNow;
                            property.SetValue(instance, value);
                        }
                        else
                        {
                            int tempVal;
                            int? value = Int32.TryParse(dataDic[property.Name].ToString(), out tempVal) ? tempVal : (int?)null;
                            property.SetValue(instance, value);
                        }
                    }
                    else
                    {
                        var value = Convert.ChangeType(dataDic[property.Name], property.PropertyType);
                        property.SetValue(instance, value, null);
                    }
                    continue;
                }
               //Loading Nested properties 
                if (property.PropertyType.IsClass && property.PropertyType != typeof(string) && !property.PropertyType.FullName.Contains("System.Runtime"))
                {
                    var innerInstance = compilerResults.CompiledAssembly.CreateInstance(property.PropertyType.FullName, false, BindingFlags.CreateInstance, null, null, null, null);
                    RecursiveLoad(innerInstance, dataDic, compilerResults);
                    property.SetValue(instance, innerInstance, null);
                }
            }
        }
        //Recursive method to vaalidate the response iwth the validation data.

    }
}
